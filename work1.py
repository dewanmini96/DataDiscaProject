# -*- coding: utf-8 -*-
"""Work1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1I7rZa8oezFysWszKPcb72GNx-MHvrgQk

# Import data  to pandas
"""

import pandas as pd

"""
Read Online Retail Excel Data Set"""

df =pd.read_excel('Online Retail.xlsx')

"""print the fist three rows in data set

"""

print(df.head(3))

"""save the excel file in csv format"""

df.to_csv('Online Retail 1.csv',index=False)

"""save the excel file in json format"""

df.to_json('Online Retail 2.json')

"""Identify number of rows in data set"""

rows = len(df.axes[0])
print("Number of Rows: ", rows)

"""Identifie number of columns in data set"""

cols = len(df.axes[1])
print("Number of Columns: ", cols)

"""Feild names of the data set"""

df.columns

"""Description about each data column

"""

df.InvoiceNo.unique

df.StockCode.unique

df.Description.unique

df.Quantity.unique

df.InvoiceNo.unique

df.UnitPrice.unique

df.CustomerID.unique

df.Country.unique

import numpy as np

df.max(axis =0)

df.min(axis=0)

df['Quantity'].max()

df['InvoiceDate'].max()

df['UnitPrice'].max()

df['CustomerID'].max()

df['StockCode'].max()

df.describe()

df['Country'].dtype

df['CustomerID'].dtype

df['StockCode'].dtype

df['Description'].dtype

df['InvoiceDate'].dtype

df['InvoiceNo'].dtype

df['Quantity'].dtype

df['UnitPrice'].dtype

df['Country'].describe()

df['CustomerID'].describe()

df['Description'].describe()

df['InvoiceDate'].describe()

df['InvoiceNo'].describe()

df['StockCode'].describe()

import plotly.express as px

fig = px.scatter(df, x="InvoiceNo", y="Quantity")
fig.show()

fig1 = px.pie(df,values ='Quantity', names='Country')
fig1.show()

X=df['Country'].value_counts()
X

df['CustomerID'].value_counts()

import plotly.express as px
x = px.data.tips()
fig2 = px.histogram(df, x="Country")
fig2.show()

country_grp = df.groupby(['Country'])['Quantity'].sum()

country_grp

import plotly.express as px
country_grp = px.data.tips()
fig3 = px.histogram(df, x="Country")
fig3.show()

invoice_grp = df.groupby(['InvoiceNo'])['Quantity'].sum()

invoice_grp

invoice_grp1 = df.groupby(['InvoiceNo','Country'])['Quantity'].sum()
invoice_grp1

customerid_grp = df.groupby(['CustomerID'])['Quantity'].sum()

customerid_grp

customerid_grp1 = df.groupby(['CustomerID','Country'])['Quantity'].sum()
customerid_grp1

Date_grp = df.groupby(['InvoiceDate'])['Quantity'].sum()

Date_grp

Date_grp1 = df.groupby(['InvoiceDate','Country'])['Quantity'].sum()
Date_grp1

import matplotlib.pyplot as plt

# Commented out IPython magic to ensure Python compatibility.
import seaborn as sns
# %matplotlib inline
df =pd.read_excel('Online Retail.xlsx', index_col='InvoiceDate')

df.index = pd.to_datetime(df.index, format = '%Y-%m-%d %H:%M')

#top 20 products by quantity
sns.set_style('whitegrid')
Top20Quan = df.groupby('Description')['Quantity'].agg('sum').sort_values(ascending=False)[0:20]
Top20Quan

fig,axs = plt.subplots(nrows=2, ncols=1, figsize = (12,12))
plt.subplots_adjust(hspace = 0.3)
fig.suptitle('Best Selling Products by Amount and Value', fontsize=15, x = 0.4, y = 0.98)
sns.barplot(x=Top20Quan.values, y=Top20Quan.index, ax= axs[0]).set(xlabel='Total amount of sales')
axs[0].set_title('By Amount', size=12, fontweight = 'bold')

#finding the most returned items and the customers with the corresponding country
ReturnedItems = df[df.Quantity<0].groupby('Description')['Quantity'].sum()
ReturnedItems = ReturnedItems.abs().sort_values(ascending=False)[0:10]
ReturnCust = df[df.Quantity<0].groupby(['CustomerID','Country'])['Quantity'].sum()
ReturnCust = ReturnCust.abs().sort_values(ascending=False)[0:10]

ReturnedItems

ReturnCust

#creting the subplot
fig, [ax1, ax2] = plt.subplots(nrows=2, ncols=1, figsize=(12,10))
ReturnedItems.sort_values().plot(kind='barh', ax=ax1).set_title('Most Returned Items', fontsize=15)
ReturnCust.sort_values().plot(kind='barh', ax=ax2).set_title('Customers with Most Returns', fontsize=15)
ax1.set(xlabel='Quantity')
ax2.set(xlabel='Quantity')
plt.subplots_adjust(hspace=0.4)
plt.show()

#resampling to get the weekly sales and returns
WeeklySale = df[df['Quantity']>0].Quantity.resample('W').sum()
WeeklyRet = df[df['Quantity']<0].Quantity.resample('W').sum().abs()
#creating the subplot
fig,[ax1, ax2] = plt.subplots(nrows=1,ncols=2, figsize = (15,5))
WeeklySale.plot(ax=ax1).set(xlabel="Month", ylabel="Quantity")
ax1.set_title("Weekly Sales Quantity", fontsize = 15)
WeeklyRet.plot(ax=ax2).set(xlabel="Month", ylabel="Quantity")
ax2.set_title("Weekly Returns Quantity", fontsize = 15)
plt.show()

#creating distribution plots
fig , [ax1,ax2] = plt.subplots(nrows=1,ncols=2,figsize=(12,4))
with sns.axes_style('dark'):
    sns.distplot(df['Quantity'], ax=ax1)
    sns.distplot(df['UnitPrice'], ax=ax2)
fig.suptitle('UnitPrice and Quantity Distribution', fontsize = 15)
plt.show()

